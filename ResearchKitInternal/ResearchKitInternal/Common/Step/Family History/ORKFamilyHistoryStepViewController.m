/*
 Copyright (c) 2023, Apple Inc. All rights reserved.
 
 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:
 
 1.  Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 
 2.  Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation and/or
 other materials provided with the distribution.
 
 3.  Neither the name of the copyright holder(s) nor the names of any contributors
 may be used to endorse or promote products derived from this software without
 specific prior written permission. No license is granted to the trademarks of
 the copyright holders even if such marks are included in this software.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#import "ORKFamilyHistoryStepViewController.h"
#import "ORKFamilyHistoryStepViewController_Private.h"

#import "ORKConditionStepConfiguration.h"
#import "ORKFamilyHistoryResult.h"
#import "ORKFamilyHistoryStep.h"
#import "ORKHealthCondition.h"
#import "ORKRelatedPerson.h"
#import "ORKRelativeGroup.h"

#import "ORKFamilyHistoryTableHeaderView.h"

#import "ORKFamilyHistoryRelatedPersonCell.h"
#import "ORKFamilyHistoryTableFooterView.h"
#import "ORKFamilyHistoryTableHeaderView.h"

#import "ORKIUtils.h"

#import <ResearchKit/ORKAnswerFormat.h>
#import <ResearchKit/ORKAnswerFormat_Internal.h>
#import <ResearchKit/ORKCollectionResult_Private.h>
#import <ResearchKit/ORKFormStep.h>
#import <ResearchKit/ORKHelpers_Internal.h>
#import <ResearchKit/ORKNavigableOrderedTask.h>
#import <ResearchKit/ORKPredicateFormItemVisibilityRule.h>
#import <ResearchKit/ORKResultPredicate.h>
#import <ResearchKit/ORKResult_Private.h>
#import <ResearchKit/ORKSkin.h>
#import <ResearchKit/ORKStep_Private.h>
#import <ResearchKit/ORKQuestionResult.h>

#import <ResearchKitUI/ORKAccessibilityFunctions.h>
#import <ResearchKitUI/ORKLearnMoreStepViewController.h>
#import <ResearchKitUI/ORKNavigationContainerView_Internal.h>
#import <ResearchKitUI/ORKReviewIncompleteCell.h>
#import <ResearchKitUI/ORKStepContainerView.h>
#import <ResearchKitUI/ORKStepContentView.h>
#import <ResearchKitUI/ORKStepHeaderView_Internal.h>
#import <ResearchKitUI/ORKStepViewController_Internal.h>
#import <ResearchKitUI/ORKTableContainerView.h>
#import <ResearchKitUI/ORKTaskViewController_Internal.h>


@class ORKTaskViewController;


NSString * const ORKFamilyHistoryRelatedPersonCellIdentifier = @"ORKFamilyHistoryRelatedPersonCellIdentifier";

NSString * const ORKHealthConditionIDontKnowChoiceValue = @"do not know";
NSString * const ORKHealthConditionNoneOfTheAboveChoiceValue = @"none of the above";
NSString * const ORKHealthConditionPreferNotToAnswerChoiceValue = @"prefer not to answer";

#if RK_APPLE_INTERNAL
// identifiers generated by RA that will be used for the new form item for detected minors
NSString * const ChildMinorFormItemIdentifier = @"02aaa6a7-0b76-47e2-9484-0e41e76a3b4f";
NSString * const ParentMinorFormItemIdentifier = @"d0c13961-912a-4512-a546-e5d1149970da";
NSString * const SiblingMinorFormItemIdentifier = @"9cd84628-dddf-44cc-a137-f1b08d916d14";

// The below identifiers are from the common study bundle and are used to detect when conditional logic is needed for minors
NSString * const ChildAgeOfDeathFormItemIdentifier = @"3a1d5d48-498d-4398-bf3f-cb32520112f7";
NSString * const ChildBirthYearFormItemIdentifier = @"3cb9e718-279a-4c45-b2a8-7fe90efca65a";
NSString * const ChildFormStepIdentifier = @"dd05b799-8a81-4080-b212-625fb7b8db32";
NSString * const ChildRelativeGroupIdentifier = @"87797bfc-58c7-4720-8adf-1b621fd214d9";
NSString * const ChildVitalStatusFormItemIdentifier = @"9f6b6c8f-5f55-4b89-bd98-ddf944a21730";

NSString * const ParentAgeOfDeathFormItemIdentifier = @"f9a2b8e0-4b62-4313-a027-291125eed19d";
NSString * const ParentBirthYearFormItemIdentifier = @"ee42b323-3277-4d7e-aba2-7a2083c404c0";
NSString * const ParentFormStepIdentifier = @"8049eab1-4d47-418b-998d-2fc076443fe6";
NSString * const ParentRelativeGroupIdentifier = @"c2e6eab8-05ec-4c43-800e-0db21552a9d9";
NSString * const ParentVitalStatusFormItemIdentifier = @"29f1507f-ca90-4fde-a700-fe3ce89b85a8";

NSString * const SiblingAgeOfDeathFormItemIdentifier = @"16e5ef4c-cc2d-4617-9063-93eab2096dcb";
NSString * const SiblingBirthYearFormItemIdentifier = @"6a1e6558-e712-4ed9-bc1c-20bbae151c0e";
NSString * const SiblingFormStepIdentifier = @"a45a8e2b-3975-4bfc-8be1-b65b7d9fb785";
NSString * const SiblingRelativeGroupIdentifier = @"10d5e537-0b0d-4dfb-ba68-ea3c96c730f5";
NSString * const SiblingVitalStatusFormItemIdentifier = @"f1fc324c-5494-4339-ba11-456ec5b31e9a";

NSString * const VitalStatusDontKnowValue = @"do not know";
NSString * const VitalStatusPreferNotToAnswerValue = @"prefer not to answer";
NSString * const VitalStatusDeceasedAnswerValue = @"deceased";

double const AgeOfDeathPredicateMinorAgeValue = 18.0;
double const AgeOfDeathPredicateMinExpectedValue = 19.0;
double const BirthYearPredicateMinExpectedValue = 1.0;
#endif

@interface ORKFamilyHistoryStepViewController () <ORKTableContainerViewDelegate, ORKTaskViewControllerDelegate, ORKFamilyHistoryTableFooterViewDelegate, ORKFamilyHistoryRelatedPersonCellDelegate>

@property (nonatomic, strong) ORKTableContainerView *tableContainer;
@property (nonatomic, strong) UITableView *tableView;
@property (nonatomic, strong) ORKStepContentView *headerView;

@end


@implementation ORKFamilyHistoryStepViewController {
    NSArray<NSLayoutConstraint *> *_constraints;
    
    NSArray<ORKRelativeGroup *> *_relativeGroups;
    NSArray<ORKNavigableOrderedTask *> *_relativeGroupOrderedTasks;
    
    NSMutableDictionary<NSString *, NSMutableArray<ORKRelatedPerson *> *> *_relatedPersons;
    NSMutableArray<NSString *> *_displayedConditions;
    NSArray<NSString *> *_conditionIdentifiersFromLastSession;
    
    NSMutableDictionary<NSString *, NSString *> *_conditionsTextAndValues;
    
    NSArray<NSString *> *_conditionsWithinCurrentTask;
    
    BOOL _editingPreviousTask;
    ORKRelatedPerson *_relativeForPresentedTask;
}


- (instancetype)ORKFamilyHistoryStepViewController_initWithResult:(ORKResult *)result {
    ORKStepResult *stepResult = (ORKStepResult *)result;
    if (stepResult && stepResult.results.count > 0) {
        ORKFamilyHistoryResult *familyHistoryResult = (ORKFamilyHistoryResult *)stepResult.firstResult;
        
        if (familyHistoryResult) {
            _relatedPersons = [NSMutableDictionary new];
            for (ORKRelatedPerson *relatedPerson in familyHistoryResult.relatedPersons) {
                [self saveRelatedPerson:[relatedPerson copy]];
            }
 
            _conditionIdentifiersFromLastSession = [familyHistoryResult.displayedConditions copy];
        }
        
    }
    
    return self;
}

- (instancetype)initWithStep:(ORKStep *)step result:(ORKResult *)result {
    self = [super initWithStep:step];
    return [self ORKFamilyHistoryStepViewController_initWithResult:result];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [self stepDidChange];
    
    _relatedPersons = _relatedPersons ? : [NSMutableDictionary new];
    _displayedConditions = [NSMutableArray new];
    _conditionsTextAndValues = [NSMutableDictionary new];
    
    _relativeGroups = [[self familyHistoryStep].relativeGroups copy];
    
    [self configureOrderedTasks];

    [_tableView reloadData];
}

- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear: animated];
    [_tableContainer setNeedsLayout];
}

- (void)stepDidChange {
    [super stepDidChange];
    
    [_tableContainer removeFromSuperview];
    _tableContainer = nil;
    
    if (self.isViewLoaded && self.step) {
        _tableContainer = [[ORKTableContainerView alloc] initWithStyle:UITableViewStyleGrouped pinNavigationContainer:NO];
        _tableContainer.tableContainerDelegate = self;
        [self.view addSubview:_tableContainer];
        _tableContainer.tapOffView = self.view;
        
        [self setupViews];
    }
}

- (void)setupViews {
    [self setupTableView];
    [self setupHeaderView];
    [self setupFooterViewIfNeeded];
    [self updateViewColors];
    
    [self setupConstraints];
    [_tableContainer setNeedsLayout];
}

- (void)traitCollectionDidChange:(UITraitCollection *)previousTraitCollection {
    [super traitCollectionDidChange:previousTraitCollection];
    
    [self setupViews];
    [self updateViewColors];
}

- (void)updateNavBarBackgroundColor:(UIColor *)color {
    UINavigationBarAppearance *appearance = [UINavigationBarAppearance new];
    [appearance configureWithOpaqueBackground];
    appearance.backgroundColor = color;
    //[LC:NOTE] this is needed to hide the divider line per fXH UI Spec
    appearance.shadowImage = [UIImage new];
    appearance.shadowColor = [UIColor clearColor];
    
    self.navigationController.navigationBar.scrollEdgeAppearance = appearance;
    self.navigationController.navigationBar.compactAppearance = appearance;
    self.navigationController.navigationBar.standardAppearance = appearance;
    
    if (@available(iOS 15.0, *)) {
        self.navigationController.navigationBar.compactScrollEdgeAppearance = appearance;
    }
}

- (void)setupConstraints {
    if (_constraints) {
        [NSLayoutConstraint deactivateConstraints:_constraints];
    }
    _tableContainer.translatesAutoresizingMaskIntoConstraints = NO;
    _constraints = nil;

    
    _constraints = @[
                     [NSLayoutConstraint constraintWithItem:_tableContainer
                                                  attribute:NSLayoutAttributeTop
                                                  relatedBy:NSLayoutRelationEqual
                                                     toItem:self.view
                                                  attribute:NSLayoutAttributeTop
                                                 multiplier:1.0
                                                   constant:0.0],
                     [NSLayoutConstraint constraintWithItem:_tableContainer
                                                  attribute:NSLayoutAttributeLeft
                                                  relatedBy:NSLayoutRelationEqual
                                                     toItem:self.view
                                                  attribute:NSLayoutAttributeLeft
                                                 multiplier:1.0
                                                   constant:0.0],
                     [NSLayoutConstraint constraintWithItem:_tableContainer
                                                  attribute:NSLayoutAttributeRight
                                                  relatedBy:NSLayoutRelationEqual
                                                     toItem:self.view
                                                  attribute:NSLayoutAttributeRight
                                                 multiplier:1.0
                                                   constant:0.0],
                     [NSLayoutConstraint constraintWithItem:_tableContainer
                                                  attribute:NSLayoutAttributeBottom
                                                  relatedBy:NSLayoutRelationEqual
                                                     toItem:self.view
                                                  attribute:NSLayoutAttributeBottom
                                                 multiplier:1.0
                                                   constant:0.0]
                     ];
    [NSLayoutConstraint activateConstraints:_constraints];
    
}

- (void)setupTableView {
    _tableView = _tableContainer.tableView;
    [_tableView registerClass:[ORKFamilyHistoryRelatedPersonCell class] forCellReuseIdentifier:ORKFamilyHistoryRelatedPersonCellIdentifier];
    _tableView.separatorColor = [UIColor clearColor];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    _tableView.clipsToBounds = YES;
    _tableView.rowHeight = UITableViewAutomaticDimension;
    _tableView.sectionHeaderHeight = UITableViewAutomaticDimension;
    _tableView.estimatedRowHeight = ORKGetMetricForWindow(ORKScreenMetricTableCellDefaultHeight, self.view.window);
    _tableView.estimatedSectionHeaderHeight = 30.0;
}

- (void)setupHeaderView {
    _headerView = _tableContainer.stepContentView;
    _headerView.stepTopContentImage = self.step.image;
    _headerView.titleIconImage = self.step.iconImage;
    _headerView.stepTitle = self.step.title;
    _headerView.stepText = self.step.text;
    _headerView.stepDetailText = self.step.detailText;
    _headerView.stepHeaderTextAlignment = self.step.headerTextAlignment;
    _headerView.bodyItems = self.step.bodyItems;
    _tableContainer.stepTopContentImageContentMode = self.step.imageContentMode;
}

- (ORKFamilyHistoryStep *)familyHistoryStep {
    ORKFamilyHistoryStep *step = ORKDynamicCast(self.step, ORKFamilyHistoryStep);
    
    if (step == nil) {
        @throw [NSException exceptionWithName:NSInvalidArgumentException reason:@"the ORKFamilyHistoryStepViewController must be presented with a ORKFamilyHistoryStep"  userInfo:nil];
    }
    
    return step;
}

- (void)configureOrderedTasks {
    NSMutableArray<ORKNavigableOrderedTask *> *relativeGroupOrderedTasks = [NSMutableArray new];
    
    ORKFamilyHistoryStep *step = [self familyHistoryStep];
    
    for (ORKRelativeGroup *relativeGroup in step.relativeGroups) {
        NSMutableArray<ORKStep *> *steps = [NSMutableArray array];
        
        // add formSteps from ORKRelativeGroup to steps array
        
        for (ORKFormStep *formStep in relativeGroup.formSteps) {
            [steps addObject:[formStep copy]];
        }
        
        // configure and add health condition formStep to steps array
        
        NSMutableArray<ORKFormItem *> *formItems = [NSMutableArray new];
        
        ORKTextChoiceAnswerFormat *textChoiceAnswerFormat = [self makeConditionsTextChoiceAnswerFormat:[step.conditionStepConfiguration.conditions copy]];
        ORKFormItem *healthConditionsFormItem = [[ORKFormItem alloc] initWithIdentifier:step.conditionStepConfiguration.conditionsFormItemIdentifier
                                                                                   text:ORKILocalizedString(@"FAMILY_HISTORY_CONDITIONS_FORM_ITEM_TEXT", @"")
                                                                           answerFormat:textChoiceAnswerFormat];
        
#if RK_APPLE_INTERNAL
    NSString *internalRelativeGroupIdentifier = [self _identifierOfDetectedInternalGroup:relativeGroup];
    if (internalRelativeGroupIdentifier != nil) {
        
        NSString *formStepIdentifier;
        NSString *minorFormItemIdentifier;
        NSString *relativeAgeOfDeathFormItemIdentifier;
        NSString *relativeBirthYearFormItemIdentifier;
        NSString *relativeVitalStatusFormItemIdentifier;
        
        if ([internalRelativeGroupIdentifier isEqualToString:ParentRelativeGroupIdentifier]) {
            minorFormItemIdentifier = ParentMinorFormItemIdentifier;
            formStepIdentifier = ParentFormStepIdentifier;
            relativeAgeOfDeathFormItemIdentifier = ParentAgeOfDeathFormItemIdentifier;
            relativeBirthYearFormItemIdentifier = ParentBirthYearFormItemIdentifier;
            relativeVitalStatusFormItemIdentifier = ParentVitalStatusFormItemIdentifier;
        } else if ([internalRelativeGroupIdentifier isEqualToString:SiblingRelativeGroupIdentifier]) {
            minorFormItemIdentifier = SiblingMinorFormItemIdentifier;
            formStepIdentifier = SiblingFormStepIdentifier;
            relativeAgeOfDeathFormItemIdentifier = SiblingAgeOfDeathFormItemIdentifier;
            relativeBirthYearFormItemIdentifier = SiblingBirthYearFormItemIdentifier;
            relativeVitalStatusFormItemIdentifier = SiblingVitalStatusFormItemIdentifier;
        } else if ([internalRelativeGroupIdentifier isEqualToString:ChildRelativeGroupIdentifier]) {
            minorFormItemIdentifier = ChildMinorFormItemIdentifier;
            formStepIdentifier = ChildFormStepIdentifier;
            relativeAgeOfDeathFormItemIdentifier = ChildAgeOfDeathFormItemIdentifier;
            relativeBirthYearFormItemIdentifier = ChildBirthYearFormItemIdentifier;
            relativeVitalStatusFormItemIdentifier = ChildVitalStatusFormItemIdentifier;
        }
        
        if ([self _formStepAndFormItemIdentifiersDetectedInGroup:relativeGroup
                                              formStepIdentifier:formStepIdentifier
                                   vitalStatusFormItemIdentifier:relativeVitalStatusFormItemIdentifier
                                    ageOfDeathFormItemIdentifier:relativeAgeOfDeathFormItemIdentifier
                                     birthYearFormItemIdentifier:relativeBirthYearFormItemIdentifier] && minorFormItemIdentifier != nil) {
            // create bool formItem that appears above conditions list formItem
            ORKBooleanAnswerFormat *boolAnswerFormat = [ORKAnswerFormat booleanAnswerFormat];
            ORKFormItem *checkForMinorConditionsFormItem = [[ORKFormItem alloc] initWithIdentifier:minorFormItemIdentifier
                                                                                              text:ORKILocalizedString(@"FAMILY_HISTORY_PROVIDE_MINOR_CONDITION_INFO_QUESTION", @"")
                                                                                      answerFormat:boolAnswerFormat];
            
            // create predicate that will makes sure the bool formItem is only presented if 18 or younger is selected
            NSCompoundPredicate *showCheckForMinorConditionsCompoundPredicate = [self _compoundPredicateForMinorConditionCheck:formStepIdentifier
                                                                                           relativeBirthYearFormItemIdentifier:relativeBirthYearFormItemIdentifier
                                                                                          relativeAgeOfDeathFormItemIdentifier:relativeAgeOfDeathFormItemIdentifier];
            
            ORKPredicateFormItemVisibilityRule *whenRelative18OrYoungerRule = [[ORKPredicateFormItemVisibilityRule alloc] initWithPredicate:showCheckForMinorConditionsCompoundPredicate];
            [checkForMinorConditionsFormItem setVisibilityRule:whenRelative18OrYoungerRule];
            
            [formItems addObject:checkForMinorConditionsFormItem];
            
            // create compound predicate for conditionally presenting the conditions list
            NSCompoundPredicate *showConditionsItemCompoundPredicate = [self _compoundPredicateForConditionsItem:formStepIdentifier
                                                                            relativeAgeOfDeathFormItemIdentifier:relativeAgeOfDeathFormItemIdentifier
                                                                             relativeBirthYearFormItemIdentifier:relativeBirthYearFormItemIdentifier
                                                                           relativeVitalStatusFormItemIdentifier:relativeVitalStatusFormItemIdentifier
                                                                                        conditionsStepIdentifier:step.conditionStepConfiguration.stepIdentifier
                                                                                         minorFormItemIdentifier:minorFormItemIdentifier];
            
            ORKPredicateFormItemVisibilityRule *visibilityRule = [[ORKPredicateFormItemVisibilityRule alloc] initWithPredicate:showConditionsItemCompoundPredicate];
            [healthConditionsFormItem setVisibilityRule:visibilityRule];
        }
    }
#endif
        
        healthConditionsFormItem.showsProgress = YES;
        
        [formItems addObject:healthConditionsFormItem];
        [formItems addObjectsFromArray:step.conditionStepConfiguration.formItems];
        
        ORKFormStep *conditionFormStep = [[ORKFormStep alloc] initWithIdentifier:step.conditionStepConfiguration.stepIdentifier];
        conditionFormStep.title = ORKILocalizedString(@"FAMILY_HISTORY_CONDITIONS_STEP_TITLE", @"");
        conditionFormStep.detailText = ORKILocalizedString(@"FAMILY_HISTORY_CONDITIONS_STEP_DESCRIPTION_TEMP", @"");
        conditionFormStep.optional = NO;
        conditionFormStep.formItems = [formItems copy];
        
        [steps addObject:conditionFormStep];
        
        ORKNavigableOrderedTask *orderedTask = [[ORKNavigableOrderedTask alloc] initWithIdentifier:relativeGroup.identifier steps:steps];
        [relativeGroupOrderedTasks addObject:orderedTask];
    }
    
    _relativeGroupOrderedTasks = [relativeGroupOrderedTasks copy];
}

- (ORKTextChoiceAnswerFormat *)makeConditionsTextChoiceAnswerFormat:(NSArray<ORKHealthCondition *> *)healthConditions {
    NSMutableArray<NSString *> *conditionsWithinCurrentTask = _conditionsWithinCurrentTask ? [_conditionsWithinCurrentTask mutableCopy] : [NSMutableArray new];
    
    NSMutableArray<ORKTextChoice *> *textChoices = [NSMutableArray new];
    for (ORKHealthCondition *healthCondition in healthConditions) {
        
        if (![conditionsWithinCurrentTask containsObject:healthCondition.identifier]) {
            [conditionsWithinCurrentTask addObject:healthCondition.identifier];
        }
        
        ORKTextChoice *textChoice = [[ORKTextChoice alloc] initWithText:healthCondition.displayName
                                                             detailText:nil
                                                                  value:healthCondition.value
                                                              exclusive:NO];
        
        [textChoices addObject:textChoice];
        
        _conditionsTextAndValues[(NSString *)healthCondition.value] = healthCondition.displayName;
    }
    
    _conditionsWithinCurrentTask = [conditionsWithinCurrentTask copy];
    
    ORKTextChoice *noneOfTheAboveTextChoice = [[ORKTextChoice alloc] initWithText:ORKILocalizedString(@"FAMILY_HISTORY_NONE_OF_THE_ABOVE", @"")
                                                         detailText:nil
                                                              value:ORKHealthConditionNoneOfTheAboveChoiceValue
                                                          exclusive:YES];
    
    ORKTextChoice *idkTextChoice = [[ORKTextChoice alloc] initWithText:ORKILocalizedString(@"FAMILY_HISTORY_I_DONT_KNOW", @"")
                                                         detailText:nil
                                                              value:ORKHealthConditionIDontKnowChoiceValue
                                                          exclusive:YES];
    
    ORKTextChoice *preferNotToAnswerTextChoice = [[ORKTextChoice alloc] initWithText:ORKILocalizedString(@"FAMILY_HISTORY_PREFER_NOT_TO_ANSWER", @"")
                                                         detailText:nil
                                                              value:ORKHealthConditionPreferNotToAnswerChoiceValue
                                                          exclusive:YES];
    
    [textChoices addObject:noneOfTheAboveTextChoice];
    [textChoices addObject:idkTextChoice];
    [textChoices addObject:preferNotToAnswerTextChoice];
    
    _conditionsTextAndValues[(NSString *)noneOfTheAboveTextChoice.value] = noneOfTheAboveTextChoice.text;
    _conditionsTextAndValues[(NSString *)idkTextChoice.value] = idkTextChoice.text;
    _conditionsTextAndValues[(NSString *)preferNotToAnswerTextChoice.value] = preferNotToAnswerTextChoice.text;
    
    ORKTextChoiceAnswerFormat *textChoiceAnswerFormat = [[ORKTextChoiceAnswerFormat alloc] initWithStyle:ORKChoiceAnswerStyleMultipleChoice
                                                                                             textChoices:textChoices];
    
    return textChoiceAnswerFormat;
}

- (void)presentNewOrderedTaskForRelativeGroup:(ORKRelativeGroup *)relativeGroup {
    ORKNavigableOrderedTask *taskToPresent = [self taskForRelativeGroup:relativeGroup];
    
    ORKTaskViewController *taskViewController = [[ORKTaskViewController alloc] initWithTask:taskToPresent taskRunUUID:nil];
    taskViewController.modalPresentationStyle = UIModalPresentationAutomatic;
    taskViewController.delegate = self;
    
    [self presentViewController:taskViewController animated:YES completion:nil];
}

- (ORKNavigableOrderedTask *)taskForRelativeGroup:(ORKRelativeGroup *)relativeGroup {
    ORKNavigableOrderedTask *task;
    
    for (ORKNavigableOrderedTask *orderedTask in _relativeGroupOrderedTasks) {
        if ([orderedTask.identifier isEqual:relativeGroup.identifier]) {
            task = orderedTask;
            break;
        }
    }
    
    if (task == nil) {
        @throw [NSException exceptionWithName:NSInvalidArgumentException reason:[NSString stringWithFormat:@"An orderedTask was not found for relative group `%@`", relativeGroup.name]  userInfo:nil];
    }
    
    return [task copy];
}

- (ORKRelativeGroup *)relativeGroupForRelatedPerson:(ORKRelatedPerson *)relatedPerson {
    ORKRelativeGroup *relativeGroup;
    
    for (ORKRelativeGroup *group in _relativeGroups) {
        if ([group.identifier isEqual:relatedPerson.groupIdentifier]) {
            relativeGroup = group;
            break;
        }
    }
    
    if (relativeGroup == nil) {
        @throw [NSException exceptionWithName:NSInvalidArgumentException reason:[NSString stringWithFormat:@"An relative group was not found for related person `%@`", relatedPerson.identifier]  userInfo:nil];
    }
    
    return [relativeGroup copy];
}

- (ORKRelatedPerson *)relatedPersonAtIndexPath:(NSIndexPath *)indexPath {
    ORKRelativeGroup *relativeGroup = _relativeGroups[indexPath.section];
    return _relatedPersons[relativeGroup.identifier][indexPath.row];
}

- (void)saveRelatedPerson:(ORKRelatedPerson *)relatedPerson {
    // check if array for relativeGroup is initialized
    if (!_relatedPersons[relatedPerson.groupIdentifier]) {
        _relatedPersons[relatedPerson.groupIdentifier] = [NSMutableArray new];
    }
    
    [_relatedPersons[relatedPerson.groupIdentifier] addObject:relatedPerson];
    
    #if RK_APPLE_INTERNAL
    [self organizeRelatedPersonsByBirthYear];
    #endif
}

#if RK_APPLE_INTERNAL

- (void)organizeRelatedPersonsByBirthYear {
    for (ORKRelativeGroup *relativeGroup in _relativeGroups) {
        if (_relatedPersons[relativeGroup.identifier].count > 1) {
            _relatedPersons[relativeGroup.identifier] = [self bubbleSortRelativeGroup:relativeGroup];
        }
    }
}

- (NSMutableArray<ORKRelatedPerson *> *)bubbleSortRelativeGroup:(ORKRelativeGroup *)relativeGroup {
    NSMutableArray<ORKRelatedPerson *> *relatedPersons = _relatedPersons[relativeGroup.identifier];
    NSMutableArray<ORKRelatedPerson *> *relatedPersonsNoAge = [NSMutableArray new];
    NSArray<ORKFormStep *> *formSteps = [relativeGroup.formSteps copy];
    
    NSInteger index = relatedPersons.count;
    
    while (index > 0) {
        for (int tempIndex = 0; tempIndex < index - 1; tempIndex++) {
            ORKRelatedPerson *relatedPersonLeft = relatedPersons[tempIndex];
            ORKRelatedPerson *relatedPersonRight = relatedPersons[tempIndex + 1];
            
            if ([relatedPersonLeft getAgeFromFormSteps:formSteps].doubleValue > [relatedPersonRight getAgeFromFormSteps:formSteps].doubleValue) {
                [relatedPersons exchangeObjectAtIndex:tempIndex withObjectAtIndex:tempIndex + 1];
            } else if ([relatedPersonLeft getAgeFromFormSteps:formSteps] == [relatedPersonRight getAgeFromFormSteps:formSteps]) {
                if ([relatedPersonLeft.taskResult.startDate compare:relatedPersonRight.taskResult.startDate] == NSOrderedAscending) {
                    [relatedPersons exchangeObjectAtIndex:tempIndex withObjectAtIndex:tempIndex + 1];
                }
            }
        }
        
        index -= 1;
    }
    
    // collect all relatives with no age provided
    for (int tempIndex = 0; tempIndex < relatedPersons.count; tempIndex++) {
        ORKRelatedPerson *relatedPerson = relatedPersons[tempIndex];

        if ([relatedPerson getAgeFromFormSteps:formSteps] == nil) {
            [relatedPersonsNoAge addObject:relatedPerson];
        }
    }
    
    // remove all related members with no age provided then append them to the end of the array
    [relatedPersons removeObjectsInArray:relatedPersonsNoAge];
    [relatedPersons addObjectsFromArray:relatedPersonsNoAge];

    return relatedPersons;
}

- (void)populateAgeQuestionValuesForRelatedPerson:(ORKRelatedPerson *)relatedPerson {
    ORKRelativeGroup *relativeGroup = [self relativeGroupForRelatedPerson:relatedPerson];
    
    for (ORKFormStep *formStep in relativeGroup.formSteps) {
        for (ORKFormItem *formItem in formStep.formItems) {
            if ([formItem.answerFormat isKindOfClass:[ORKAgeAnswerFormat class]]) {
                ORKAgeAnswerFormat *ageAnswerFormat = (ORKAgeAnswerFormat *)formItem.answerFormat;
                // if this condition passes we should be confident that we're dealing with the correct ageAnswerFormat
                if (ageAnswerFormat.minimumAgeCustomText != nil && ageAnswerFormat.maximumAgeCustomText != nil && ageAnswerFormat.treatMinAgeAsRange) {
                    [relatedPerson setAgeAnswerFormat:[ageAnswerFormat copy] ageFormItemIdentifier:[formItem.identifier copy]];
                }
            }
        }
    }
}

- (nullable NSString *)_identifierOfDetectedInternalGroup:(ORKRelativeGroup *)relativeGroup {
    NSSet<NSString *> *internalRelativeGroupIdentifiers = [NSSet setWithArray:@[
        ParentRelativeGroupIdentifier,
        SiblingRelativeGroupIdentifier,
        ChildRelativeGroupIdentifier
    ]];
    
    NSString *result = [internalRelativeGroupIdentifiers containsObject:relativeGroup.identifier] ? relativeGroup.identifier : nil;
    return result;
}

- (BOOL)_formStepAndFormItemIdentifiersDetectedInGroup:(ORKRelativeGroup *)relativeGroup
                                    formStepIdentifier:(NSString *)formStepIdentifier
                         vitalStatusFormItemIdentifier:(NSString *)vitalStatusFormItemIdentifier
                          ageOfDeathFormItemIdentifier:(NSString *)ageOfDeathFormItemIdentifier
                           birthYearFormItemIdentifier:(NSString *)birthYearFormItemIdentifier {
    
    BOOL vitalStatusFormItemDetected = NO;
    BOOL birthYearFormItemDetected = NO;
    BOOL ageOfDeathFormItemDetected = NO;
    
    for (ORKFormStep *formStep in relativeGroup.formSteps) {
        // check for formStep identifier
        if (formStepIdentifier != nil && [formStep.identifier isEqualToString:formStepIdentifier]) {
            for (ORKFormItem *formItem in formStep.formItems) {
                // check for vitality formItem identifier
                if ([formItem.identifier isEqualToString:vitalStatusFormItemIdentifier]) {
                    vitalStatusFormItemDetected = YES;
                }
                
                // check for age of death formItem identifier
                if ([formItem.identifier isEqualToString:ageOfDeathFormItemIdentifier]) {
                    ageOfDeathFormItemDetected = YES;
                }
                
                // check for birth-year formItem identifier
                if ([formItem.identifier isEqualToString:birthYearFormItemIdentifier]) {
                    birthYearFormItemDetected = YES;
                }
                
                if (vitalStatusFormItemDetected && ageOfDeathFormItemDetected && birthYearFormItemDetected) {
                    return YES;
                }
            }
        }
    }
    
    return NO;
}

- (NSCompoundPredicate *)_compoundPredicateForMinorConditionCheck:(NSString *)relativeFormStepIdentifier
                              relativeBirthYearFormItemIdentifier:(NSString *)relativeBirthYearFormItemIdentifier
                             relativeAgeOfDeathFormItemIdentifier:(NSString *)relativeAgeOfDeathFormItemIdentifier {
    // create predicate that will makes sure the bool formItem is only presented if 18 or younger is selected
    NSPredicate *isLivingRelative18OrYoungerPredicate = [ORKResultPredicate predicateForNumericQuestionResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:relativeFormStepIdentifier resultIdentifier:relativeBirthYearFormItemIdentifier] expectedAnswer:[ORKAgeAnswerFormat minimumAgeSentinelValue]];
    NSPredicate *isDeceasedRelative18OrYoungerPredicate = [ORKResultPredicate predicateForNumericQuestionResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:relativeFormStepIdentifier resultIdentifier:relativeAgeOfDeathFormItemIdentifier] expectedAnswer:AgeOfDeathPredicateMinorAgeValue];
    
    NSCompoundPredicate *showCheckForMinorConditionsCompoundPredicate = [NSCompoundPredicate orPredicateWithSubpredicates:@[isLivingRelative18OrYoungerPredicate, isDeceasedRelative18OrYoungerPredicate]];
    
    return showCheckForMinorConditionsCompoundPredicate;
}

- (NSCompoundPredicate *)_compoundPredicateForConditionsItem:(NSString *)relativeFormStepIdentifier
                        relativeAgeOfDeathFormItemIdentifier:(NSString *)relativeAgeOfDeathFormItemIdentifier
                         relativeBirthYearFormItemIdentifier:(NSString *)relativeBirthYearFormItemIdentifier
                       relativeVitalStatusFormItemIdentifier:(NSString *)relativeVitalStatusFormItemIdentifier
                                    conditionsStepIdentifier:(NSString *)conditionStepIdentifier
                                     minorFormItemIdentifier:(NSString *)minorFormItemIdentifier {
    /*
    create compound predicate to ensure the conditions list is only presented if an age other than 18 or younger is selected or if Yes is selected for the bool formItem created above
    */
    
    // checks for the birth year and age of death questions to determine if the dont know button was pressed
    // *Note: these two should be checked first to ensure that another predicate checking against the same result won't cause a crash if a comparison to [ORKDontAnswer answer] happens unexpectedly
    NSPredicate *preferNotToAnswerBirthYearPredicate = [ORKResultPredicate predicateForDontKnowResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:relativeFormStepIdentifier resultIdentifier:relativeBirthYearFormItemIdentifier]];
    NSPredicate *prefertNotToAnswerAgeOfDeathPredicate = [ORKResultPredicate predicateForDontKnowResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:relativeFormStepIdentifier resultIdentifier:relativeAgeOfDeathFormItemIdentifier]];
    
    // checks for the birth year and age of death questions to determine if an adult age was selected
    NSPredicate *isLivingRelativeOver18Predicate = [ORKResultPredicate predicateForNumericQuestionResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:relativeFormStepIdentifier resultIdentifier:relativeBirthYearFormItemIdentifier] minimumExpectedAnswerValue:BirthYearPredicateMinExpectedValue];
    NSPredicate *isDeceasedRelativeOver18Predicate = [ORKResultPredicate predicateForNumericQuestionResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:relativeFormStepIdentifier resultIdentifier:relativeAgeOfDeathFormItemIdentifier] minimumExpectedAnswerValue:AgeOfDeathPredicateMinExpectedValue];
    
    // checks for the vitality question to see if don't know or prefer not to answer was selected
    NSPredicate *dontKnowVitalStatusPredicate = [ORKResultPredicate predicateForChoiceQuestionResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:relativeFormStepIdentifier resultIdentifier:relativeVitalStatusFormItemIdentifier] expectedAnswerValue:VitalStatusDontKnowValue];
    NSPredicate *preferNotToAnswerVitalStatusPredicate = [ORKResultPredicate predicateForChoiceQuestionResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:relativeFormStepIdentifier resultIdentifier:relativeVitalStatusFormItemIdentifier] expectedAnswerValue:VitalStatusPreferNotToAnswerValue];
    
    // check for the checkForMinorConditionsFormItem question to see if Yes was selected
    NSPredicate *shareMinorHealthHistoryPredicate = [ORKResultPredicate predicateForBooleanQuestionResultWithResultSelector:[ORKResultSelector selectorWithStepIdentifier:conditionStepIdentifier resultIdentifier:minorFormItemIdentifier] expectedAnswer:YES];
    
    // The first two predicates here need to be ordered first. The order of the remaining predicates won't after the first two because none of them could conflict.
    NSCompoundPredicate *showConditionsItemCompoundPredicate = [NSCompoundPredicate orPredicateWithSubpredicates:@[
        preferNotToAnswerBirthYearPredicate,
        prefertNotToAnswerAgeOfDeathPredicate,
        isLivingRelativeOver18Predicate,
        isDeceasedRelativeOver18Predicate,
        dontKnowVitalStatusPredicate,
        preferNotToAnswerVitalStatusPredicate,
        shareMinorHealthHistoryPredicate
        ]];
    
    return showConditionsItemCompoundPredicate;
}
#endif


- (BOOL)didReachMaxForRelativeGroup:(ORKRelativeGroup *)relativeGroup {
    return _relatedPersons[relativeGroup.identifier].count >= relativeGroup.maxAllowed;
}

- (NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> *)getDetailInfoTextAndValuesForRelativeGroup:(ORKRelativeGroup *)relativeGroup {
    NSMutableDictionary<NSString *, NSMutableDictionary<NSString *, NSString *> *> *detailInfoTextAndValues = [NSMutableDictionary new];
    
    // parse all formSteps of the relativeGroup and check if any of its formItems are a choice type. If yes, we'll need to grab the text values from the textChoices for presentation in the tableView as opposed to presenting the value of the formItem
    for (ORKFormStep *formStep in relativeGroup.formSteps) {
        
        for (ORKFormItem *formItem in formStep.formItems) {
            
            for (NSString *identifier in relativeGroup.detailTextIdentifiers) {
                if ([identifier isEqual:formItem.identifier]) {
                    
                    detailInfoTextAndValues[identifier] = [NSMutableDictionary new];
                    
                    // check if formItem.answerFormat is of type ORKTextChoiceAnswerFormat, ORKTextScaleAnswerFormat, or ORKValuePickerAnswerFormat
                    NSArray<ORKTextChoice *> *textChoices = [NSArray new];
                    
                    if ([formItem.answerFormat isKindOfClass:[ORKTextChoiceAnswerFormat class]]) {
                        ORKTextChoiceAnswerFormat *textChoiceAnswerFormat = (ORKTextChoiceAnswerFormat *)formItem.answerFormat;
                        textChoices = textChoiceAnswerFormat.textChoices;
                    } else if ([formItem.answerFormat isKindOfClass:[ORKTextScaleAnswerFormat class]]) {
                        ORKTextScaleAnswerFormat *textScaleAnswerFormat = (ORKTextScaleAnswerFormat *)formItem.answerFormat;
                        textChoices = textScaleAnswerFormat.textChoices;
                    } else if ([formItem.answerFormat isKindOfClass:[ORKValuePickerAnswerFormat class]]) {
                        ORKValuePickerAnswerFormat *valuePickerAnswerFormat = (ORKValuePickerAnswerFormat *)formItem.answerFormat;
                        textChoices = valuePickerAnswerFormat.textChoices;
                    }
                    
                    for (ORKTextChoice *textChoice in textChoices) {
                        if ([textChoice.value isKindOfClass:[NSString class]]) {
                            NSString *stringValue = (NSString *)textChoice.value;
                            detailInfoTextAndValues[identifier][stringValue] = textChoice.text;
                        }
                    }
                }
            }
        }
    }
    
    return [detailInfoTextAndValues copy];
}

- (NSArray<ORKRelatedPerson *> *)flattenRelatedPersonArrays {
    NSMutableArray<ORKRelatedPerson *> *relatedPersons = [NSMutableArray new];
    
    for (NSString *key in _relatedPersons) {
        [relatedPersons addObjectsFromArray:_relatedPersons[key]];
    }
    
    return [relatedPersons copy];
}

- (void)notifyDelegateOnResultChange {
    [super notifyDelegateOnResultChange];
    
    if (self.hasNextStep == NO) {
        self.continueButtonItem = self.internalDoneButtonItem;
    } else {
        self.continueButtonItem = self.internalContinueButtonItem;
    }
    
    self.skipButtonItem = self.internalSkipButtonItem;
}

- (ORKStepResult *)result {
    ORKStepResult *stepResult = [super result];
    
    NSMutableArray *results = [NSMutableArray arrayWithArray:stepResult.results];
    ORKFamilyHistoryResult *familyHistoryResult = [[ORKFamilyHistoryResult alloc] initWithIdentifier:[self step].identifier];
    familyHistoryResult.startDate = stepResult.startDate;
    familyHistoryResult.endDate = stepResult.endDate;
    familyHistoryResult.relatedPersons = [self flattenRelatedPersonArrays];
    familyHistoryResult.displayedConditions = [_displayedConditions copy];
    [results addObject:familyHistoryResult];

    stepResult.results = [results copy];
    
    return stepResult;
}

- (void)resultUpdated {
    // For subclasses
}

- (nonnull UITableViewCell *)currentFirstResponderCellForTableContainerView:(nonnull ORKTableContainerView *)tableContainerView {
    return [UITableViewCell new];
}

#pragma mark ORKTaskViewControllerDelegate

- (void)taskViewController:(ORKTaskViewController *)taskViewController didFinishWithReason:(ORKTaskFinishReason)reason error:(NSError *)error {
    [self dismissViewControllerAnimated:YES completion:^{
        switch (reason) {
            case ORKTaskFinishReasonFailed:
            case ORKTaskFinishReasonDiscarded:
                break;
            case ORKTaskFinishReasonSaved:
            case ORKTaskFinishReasonCompleted:
            case ORKTaskFinishReasonEarlyTermination:
                [self handleRelatedPersonTaskResult:taskViewController.result taskIdentifier:taskViewController.task.identifier];
                [self updateDisplayedConditionsFromTaskResult:taskViewController.result];
                break;
        }
        
        self->_editingPreviousTask = NO;
        self->_relativeForPresentedTask = nil;
    }];
}

- (void)taskViewController:(ORKTaskViewController *)taskViewController learnMoreButtonPressedWithStep:(ORKLearnMoreInstructionStep *)learnMoreStep forStepViewController:(ORKStepViewController *)stepViewController {
    ORKLearnMoreStepViewController *learnMoreStepViewController = [[ORKLearnMoreStepViewController alloc] initWithStep:learnMoreStep result:nil];
    [stepViewController presentViewController:[[UINavigationController alloc] initWithRootViewController:learnMoreStepViewController] animated:YES completion:nil];
}

#pragma mark ORKFamilyHistoryRelatedPersonCellDelegate
    
- (void)familyHistoryRelatedPersonCell:(ORKFamilyHistoryRelatedPersonCell *)relatedPersonCell tappedOption:(ORKFamilyHistoryTooltipOption)option {
    NSIndexPath *indexPath = [_tableView indexPathForCell:relatedPersonCell];
    ORKRelatedPerson *currentRelatedPerson = [self relatedPersonAtIndexPath:indexPath];
  
    if (currentRelatedPerson) {
        switch (option) {
            case ORKFamilyHistoryTooltipOptionEdit: {
                // edit flow for ORKRelatedPerson
                ORKRelativeGroup *relativeGroup = [self relativeGroupForRelatedPerson:currentRelatedPerson];
                ORKNavigableOrderedTask *relatedPersonTask = [self  taskForRelativeGroup:relativeGroup];
                
                _editingPreviousTask = YES;
                _relativeForPresentedTask = [currentRelatedPerson copy];
                
                ORKTaskViewController *taskVC = [[ORKTaskViewController alloc] initWithTask:relatedPersonTask
                                                                              ongoingResult:currentRelatedPerson.taskResult
                                                                         restoreAtFirstStep:YES
                                                                        defaultResultSource:nil
                                                                                   delegate:self];
                
                #if RK_APPLE_INTERNAL
                    [taskVC setUpdatingPreviousResults:YES];
                #endif
                
                [self presentViewController:taskVC animated:YES completion:nil];
                break;
            }
                
            case ORKFamilyHistoryTooltipOptionDelete: {
                // delete flow for ORKRelatedPerson
                UIAlertController *deleteAlert = [UIAlertController alertControllerWithTitle:ORKILocalizedString(@"FAMILY_HISTORY_DELETE_ENTRY_TITLE", @"")
                                                                                     message:nil
                                                                              preferredStyle:UIAlertControllerStyleActionSheet];
                
                UIAlertAction* unfollowAction = [UIAlertAction actionWithTitle:ORKILocalizedString(@"FAMILY_HISTORY_DELETE_ENTRY", @"")
                                                                         style:UIAlertActionStyleDestructive
                                                                       handler:^(UIAlertAction * action) {
                    [self->_relatedPersons[currentRelatedPerson.groupIdentifier] removeObject:currentRelatedPerson];
                    NSIndexSet *section = [NSIndexSet indexSetWithIndex:indexPath.section];
                    [self->_tableView reloadSections:section withRowAnimation:UITableViewRowAnimationAutomatic];
                    [self resultUpdated];
                }];
                
                UIAlertAction* cancelAction = [UIAlertAction actionWithTitle:ORKILocalizedString(@"FAMILY_HISTORY_CANCEL", @"")
                                                                       style:UIAlertActionStyleCancel
                                                                     handler:nil];
                
                [deleteAlert addAction:unfollowAction];
                [deleteAlert addAction:cancelAction];
                [self presentViewController:deleteAlert animated:YES completion:nil];
                break;
            }
        }
    }
}

#pragma mark ORKFamilyHistoryTableFooterViewDelegate

- (void)ORKFamilyHistoryTableFooterView:(ORKFamilyHistoryTableFooterView *)footerView didSelectFooterForRelativeGroup:(NSString *)groupIdentifier {
    for (ORKRelativeGroup *relativeGroup in _relativeGroups) {
        if ([relativeGroup.identifier isEqual:groupIdentifier]) {
            if (![self didReachMaxForRelativeGroup:[relativeGroup copy]]) {
                [self presentNewOrderedTaskForRelativeGroup:[relativeGroup copy]];
            }
        }
    }
}

@end

@implementation ORKFamilyHistoryStepViewController (ORKFamilyHistoryReviewSupport)

- (void)updateViewColors {
    UIColor *updateColor =  self.traitCollection.userInterfaceStyle == UIUserInterfaceStyleDark ? [UIColor systemGray6Color] : [UIColor systemGroupedBackgroundColor];;
    self.view.backgroundColor = updateColor;
    self.tableView.backgroundColor = updateColor;
    [self updateNavBarBackgroundColor: updateColor];
}

- (void)setupFooterViewIfNeeded {
    _navigationFooterView = _tableContainer.navigationFooterView;
    _navigationFooterView.skipButtonItem = self.skipButtonItem;
    _navigationFooterView.continueEnabled = YES;
    _navigationFooterView.continueButtonItem = self.continueButtonItem;
    _navigationFooterView.optional = self.step.optional;
    
    [_navigationFooterView removeStyling];
}

- (void)handleRelatedPersonTaskResult:(ORKTaskResult *)taskResult taskIdentifier:(NSString *)identifier {
    ORKFamilyHistoryStep *familyHistoryStep = [self familyHistoryStep];

    // If the user is editing a previous task, just update the result of the relatedPerson
    if (_editingPreviousTask && _relativeForPresentedTask) {
        _relativeForPresentedTask.taskResult = taskResult;
        
        NSInteger index = 0;
        
        for (ORKRelatedPerson *relatedPerson in _relatedPersons[identifier]) {
            if ([relatedPerson.identifier isEqual:_relativeForPresentedTask.identifier]) {
                break;
            }
            
            index += 1;
        }
        
        _relatedPersons[identifier][index] = [_relativeForPresentedTask copy];
        
        #if RK_APPLE_INTERNAL
        [self organizeRelatedPersonsByBirthYear];
        #endif
        
        [_tableView reloadData];
    } else {
        
        // create new relatedPerson object and attach taskResult
        for (ORKRelativeGroup *relativeGroup in familyHistoryStep.relativeGroups) {
            if ([relativeGroup.identifier isEqual:identifier]) {
                ORKRelatedPerson *relatedPerson = [[ORKRelatedPerson alloc] initWithIdentifier:[NSUUID new].UUIDString
                                                                               groupIdentifier:identifier
                                                                        identifierForCellTitle:relativeGroup.identifierForCellTitle
                                                                                    taskResult:taskResult];
                
                [self saveRelatedPerson:[relatedPerson copy]];
                [_tableView reloadData];
                break;
            }
        }
    }
    
    [self resultUpdated];
}

- (NSInteger)numberOfRowsForRelativeGroupInSection:(NSInteger)section {
    ORKRelativeGroup *relativeGroup = _relativeGroups[section];
    return _relatedPersons[relativeGroup.identifier].count;
}

- (void)updateDisplayedConditionsFromTaskResult:(ORKTaskResult *)taskResult {
    ORKFamilyHistoryStep *step = [self familyHistoryStep];
    
    ORKStepResult *stepResult = (ORKStepResult *)[taskResult resultForIdentifier:step.conditionStepConfiguration.stepIdentifier];
    
    // if stepResult is nil, then choiceQuestionResult will also be nil here
    ORKChoiceQuestionResult *choiceQuestionResult = (ORKChoiceQuestionResult *)[stepResult resultForIdentifier:step.conditionStepConfiguration.conditionsFormItemIdentifier];

    // if choiceQuestionResult is nil, then choiceQuestionResult.choiceAnswers is nil
    NSArray<NSString *> *conditionsIdentifiers = choiceQuestionResult.choiceAnswers != nil ? _conditionsWithinCurrentTask : [NSArray new];
    
    for (NSString *conditionIdentifier in conditionsIdentifiers) {
          if (![_displayedConditions containsObject:conditionIdentifier]) {
            [_displayedConditions addObject:conditionIdentifier];
        }
    }
}


#pragma mark UITableViewDataSource

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return _relativeGroups.count;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [self numberOfRowsForRelativeGroupInSection:section];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    ORKRelativeGroup *relativeGroup = _relativeGroups[indexPath.section];
    
    // present a related person cell
    ORKFamilyHistoryRelatedPersonCell *cell = [tableView dequeueReusableCellWithIdentifier:ORKFamilyHistoryRelatedPersonCellIdentifier];
    [cell setSelectionStyle:UITableViewCellSelectionStyleNone];
    
    ORKFamilyHistoryStep  *familyHistoryStep = [self familyHistoryStep];
    
    BOOL didReachMaxNumberOfRelatives = [self didReachMaxForRelativeGroup:relativeGroup];
    BOOL shouldAddExtraSpaceBelowCell = ([self numberOfRowsForRelativeGroupInSection:indexPath.section] == (indexPath.row + 1)) && !didReachMaxNumberOfRelatives;
    ORKRelatedPerson *relatedPerson = [self relatedPersonAtIndexPath:indexPath];
    
#if RK_APPLE_INTERNAL
    [self populateAgeQuestionValuesForRelatedPerson:relatedPerson];
#endif
    
    NSString *title = [relatedPerson getTitleValueWithIdentifier:relativeGroup.identifierForCellTitle];
    
    cell.title = title != nil ? title : [NSString stringWithFormat:@"%@ %ld", relativeGroup.name, indexPath.row + 1];
    cell.relativeID = [relatedPerson.identifier copy];
    NSArray *detailValues = [relatedPerson getDetailListValuesWithIdentifiers:relativeGroup.detailTextIdentifiers
                                                      displayInfoKeyAndValues:[self getDetailInfoTextAndValuesForRelativeGroup:relativeGroup]];
    
    NSArray *conditionValues = [relatedPerson getConditionsListWithStepIdentifier:familyHistoryStep.conditionStepConfiguration.stepIdentifier
                                                               formItemIdentifier:familyHistoryStep.conditionStepConfiguration.conditionsFormItemIdentifier
                                                              conditionsKeyValues:[_conditionsTextAndValues copy]];
    [cell configureWithDetailValues:detailValues conditionsValues:conditionValues isLastItemBeforeAddRelativeButton:shouldAddExtraSpaceBelowCell];
    cell.delegate = self;
    
    return cell;
}

#pragma mark UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:NO];
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return UITableViewAutomaticDimension;
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    ORKRelativeGroup *relativeGroup = _relativeGroups[section];
    
    ORKFamilyHistoryTableHeaderView *headerView = (ORKFamilyHistoryTableHeaderView *)[tableView dequeueReusableHeaderFooterViewWithIdentifier:@(section).stringValue];
    
    if (headerView == nil) {
        headerView = [[ORKFamilyHistoryTableHeaderView alloc] initWithTitle:relativeGroup.sectionTitle detailText:relativeGroup.sectionDetailText];
    }
    
    BOOL isExpanded = _relatedPersons[relativeGroup.identifier].count > 0;
    [headerView setExpanded:isExpanded];
    
    return headerView;
}

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section {
    ORKRelativeGroup *relativeGroup = _relativeGroups[section];
    
    if ([self didReachMaxForRelativeGroup:relativeGroup]) {
        return 0;
    }
    
    return UITableViewAutomaticDimension;
}

- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section {
    ORKFamilyHistoryTableFooterView *footerView = (ORKFamilyHistoryTableFooterView *)[tableView dequeueReusableHeaderFooterViewWithIdentifier:@(section).stringValue];
    ORKRelativeGroup *relativeGroup = _relativeGroups[section];

    if (footerView == nil) {
        footerView = [[ORKFamilyHistoryTableFooterView alloc] initWithTitle:[NSString stringWithFormat:ORKILocalizedString(@"FAMILY_HISTORY_ADD", @"") ,relativeGroup.name]
                                                    relativeGroupIdentifier:[relativeGroup.identifier copy]
                                                                   delegate:self];
    }
    
    BOOL isExpanded = _relatedPersons[relativeGroup.identifier].count > 0;
    [footerView setExpanded:isExpanded];
    
    return footerView;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return UITableViewAutomaticDimension;
}


@end
