#! /usr/bin/env python3
# coding=utf-8

import argparse
import os
import shutil
import subprocess


def fix_copied_headers(target_path, framework_name, header_names, system_header_mappings):
    target_framework_path = target_path + '/' + framework_name
    if framework_name == "System":
        for header_name, new_header_name in system_header_mappings.items():
            escaped_header_name = header_name.replace('+', '\\+')
            subprocess.check_output(
                "find " + target_path + "/ -type f -print0 | xargs -0 -P 6 perl -pi " +
                "-e 's|#import <" + escaped_header_name + ">|#import \"" + new_header_name + "\"|;' " +
                "-e 's|#include <" + escaped_header_name + ">|#include \"" + new_header_name + "\"|;' ",
                shell=True)
    else:
        for header_name in header_names:
            escaped_header_name = header_name.replace('+', '\\+')
            subprocess.check_output(
                "find " + target_framework_path + "/ -type f -print0 | xargs -0 -P 6 perl -pi " +
                "-e 's|#import <" + framework_name + "/" + escaped_header_name + ">|#import \"" + header_name + "\"|;' " +
                "-e 's|#include <" + framework_name + "/" + escaped_header_name + ">|#include \"" + header_name + "\"|;' ",
                shell=True)


def write_umbrella_header(target_path, framework_name, header_names, macro):
    target_framework_path = target_path + '/' + framework_name
    umbrella_header = open(target_framework_path + '/' + framework_name + '_Private.h', mode='w')
    umbrella_header.write(
"""\
//
//  Autogenerated by update-private-headers.py
//  Copyright Â© 2019 Apple Inc. All rights reserved.

"""
    )
    umbrella_header.write('#if ' + macro + '\n\n')
    if framework_name == "System":
        for header_name in header_names:
            umbrella_header.write('#import <' + header_name + '>\n')
        umbrella_header.write('\n#else\n\n')
        for header_name in header_names:
            umbrella_header.write('#import "' + os.path.basename(header_name) + '"\n')
    else:
        for header_name in header_names:
            umbrella_header.write('#import <' + framework_name + '/' + header_name + '>\n')
        umbrella_header.write('\n#else\n\n')
        for header_name in header_names:
            umbrella_header.write('#import "' + header_name + '"\n')
    umbrella_header.write('\n#endif\n')
    umbrella_header.close()


def post_framework_actions(target_path, framework_name, header_names, system_header_mappings, macro):
    if framework_name:
        print("")
        fix_copied_headers(target_path, framework_name, header_names, system_header_mappings)
        write_umbrella_header(target_path, framework_name, header_names, macro)


def main():
    argument_parser = argparse.ArgumentParser(description='Import the specified PrivateHeaders')
    argument_parser.add_argument("--sdk", "-s", help="SDK root directory to copy the PrivateHeaders from.",
                                 required=True)
    argument_parser.add_argument("--target", "-t", help="Directory to copy the headers to.", required=True)
    argument_parser.add_argument("--headers", "-d", help="Headers file.", required=False)
    argument_parser.add_argument("--macro", "-m", help="Internal SDK available preprocessor macro.", required=True)
    args = argument_parser.parse_args()

    script_path = os.path.dirname(os.path.realpath(__file__))

    if args.headers:
        headers_path = args.headers
    else:
        headers_path = script_path + "/private-headers.txt"

    sdk_path = args.sdk
    target_path = args.target
    macro = args.macro

    print("Copying headers...")
    framework_suffix_path = None
    framework_source_path = None
    target_framework_path = None
    framework_name = None
    header_suffix_path = None
    header_names = []
    system_header_mappings = {}

    if os.path.isfile(headers_path):
        subprocess.check_output(
            "rm -R " + target_path,
            shell=True)

    with open(headers_path) as headersFile:
        for line in headersFile:
            line = line.strip()
            if line.startswith("#"):
                continue
            if line:
                if framework_suffix_path:
                    header_suffix_path = line
                else:
                    framework_suffix_path = line
                    framework_source_path = sdk_path + '/' + framework_suffix_path
                    if framework_suffix_path.startswith("usr/"):
                        framework_name = "System"
                    else:
                        framework_name = os.path.splitext(os.path.basename(framework_source_path))[0]
                    print("  " + framework_name)
                    target_framework_path = target_path + '/' + framework_name
                    try:
                        os.makedirs(target_framework_path)
                    except OSError:
                        pass
            else:
                post_framework_actions(target_path, framework_name, header_names, system_header_mappings, macro)
                framework_suffix_path = None
                framework_name = None
                header_suffix_path = None
                header_names = []

            if framework_suffix_path and header_suffix_path:
                if framework_suffix_path.startswith("usr/"):
                    new_header_name = None
                    if "/" in header_suffix_path:
                        new_header_name = os.path.dirname(header_suffix_path) + "_" + os.path.basename(header_suffix_path)
                    else:
                        new_header_name = header_suffix_path
                    system_header_mappings[header_suffix_path] = new_header_name
                    header_name = new_header_name
                    header_names.append(header_suffix_path)
                else:
                    header_name = os.path.basename(header_suffix_path)
                    new_header_name = header_suffix_path
                    header_names.append(header_name)
                print("    " + header_suffix_path)
                source_header_path = framework_source_path + '/' + header_suffix_path
                target_header_path = target_framework_path + '/' + new_header_name
                try:
                    os.makedirs(os.path.dirname(target_header_path))
                except OSError:
                    pass
                shutil.copyfile(source_header_path, target_header_path)
                subprocess.check_output(
                    "perl -pi -e 's|,\s*bridgeos\([\d\.,]*\)||; "
                    "s|(,\s*)iosmac(\([\d\.,]*\))|$1macCatalyst$2|; "
                    "s|(\(.*)iosmac(.*\))|$1macCatalyst$2|;' " + target_header_path,
                    shell=True)

        post_framework_actions(target_path, framework_name, header_names, system_header_mappings, macro)

        health_kit_path = target_path + "/HealthKit/"
        if os.path.isdir(health_kit_path):
            print('Fixing HealthKit...', end='')
            subprocess.check_output(
                "find " + target_path + "/HealthKit/ -type f -print0 | "
                                        "xargs -0 -P 6 perl -pi -e 's|__IOS_PROHIBITED|__SPI_AVAILABLE(ios(12.0))|'",
                shell=True)
            print('done')

        core_motion_path = target_path + "/CoreMotion/"
        if os.path.isdir(core_motion_path):
            print('Fixing CoreMotion...', end='')
            subprocess.check_output(
                "find " + target_path + "/CoreMotion/ -type f -print0 | "
                                        "xargs -0 -P 6 perl -pi -e 's|COREMOTION_EXPORT ||'",
                shell=True)
            print('done')

        print('Copying Xcode source description file...', end='')
        subprocess.check_output('cp ' + sdk_path + '/../../../../../../../../Xcode*.txt ' + target_path, shell=True)
        print('done')


if __name__ == '__main__':
    main()
