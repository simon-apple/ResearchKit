void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.pie.apple.com/HealthSPG/ResearchKit"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ResearchKit Azul"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent { label 'ResearchKitAzul' }
    stages {
            stage('Environment Setup') {
                    steps {
                            setBuildStatus("In progress", "PENDING")
							// Select Azul SDK
							sh 'set +x && echo $(< ~/.PRIVATE_JenkinsfilePwd) | sudo -S xcode-select -s /Applications/XcodeAzulC.app && set -x'
                            sh 'xcrun --kill-cache'

                            // Reset the simulators
                            sh './scripts/reset_simulators.sh'

                            // print out sdk version
                            sh 'xcodebuild -sdk iphoneos -version'

                            // create directories for output
                            sh 'mkdir -p output/ResearchKit/ios output/DiagnosticLogs'
                            sh 'rm -rf output/ResearchKit/ios/* output/DiagnosticLogs/*'

                            // create a sentinel file to use for its modification date later
                            sh 'touch ./tests-began'
                    }
            }
            stage('Build (ResearchKit iOS)') {
                    steps {
                            timeout(time: 20, unit: 'MINUTES') {
                                    sh 'echo "Build (ResearchKit iOS)"'
                                    sh 'set -o pipefail && xcodebuild clean build-for-testing -project ./ResearchKit.xcodeproj -scheme "ResearchKit" -destination "name=iPhone Xs" | tee output/ResearchKit/ios/build.log | /usr/local/bin/xcpretty'
                            }
                    }
            }
            stage('Test (ResearchKit iOS)') {
                    steps {
                            timeout(time: 20, unit: 'MINUTES') {
                                    sh 'echo "Test (ResearchKit iOS)"'
                                    sh 'set -o pipefail && xcodebuild test-without-building -project ./ResearchKit.xcodeproj -scheme "ResearchKit" -destination "name=iPhone Xs" -resultBundlePath output/ResearchKit/ios/RKTestResult | tee output/ResearchKit/ios/test.log | /usr/local/bin/xcpretty -r junit'
									sh 'set -o pipefail && xcrun xccov view --report --json output/ResearchKit/ios/RKTestResult.xcresult > output/ResearchKit/ios/CodeCoverage.json'
									// sh 'set -o pipefail && swift ./scripts/xccov-json-to-cobertura-xml.swift output/ResearchKit/ios/CodeCoverage.json -targetsToExclude ResearchKitTests.xctest > output/ResearchKit/ios/CoberturaCodeCoverage.xml'
                            }
                    }
            }
            stage('Build (ORKTest iOS)') {
                    steps {
                            timeout(time: 20, unit: 'MINUTES') {
                                    sh 'echo "Build (ORKTest iOS)"'
                                    sh 'set -o pipefail && xcodebuild clean build-for-testing -project ./Testing/ORKTest/ORKTest.xcodeproj -scheme "ORKTest" -destination "name=iPhone Xs" | tee output/ResearchKit/ios/buildORKTest.log | /usr/local/bin/xcpretty'
                            }
                    }
            }
            stage('Test (ORKTest iOS)') {
                    steps {
                            timeout(time: 20, unit: 'MINUTES') {
                                    sh 'echo "Test (ORKTest iOS)"'
                                    sh 'set -o pipefail && xcodebuild test-without-building -project ./Testing/ORKTest/ORKTest.xcodeproj -scheme "ORKTest" -destination "name=iPhone Xs" -resultBundlePath output/ResearchKit/ios/ORKTestResult | tee output/ResearchKit/ios/testORKTest.log | /usr/local/bin/xcpretty -r junit'
                            }
                    }
            }
    }
    post {
		success {
			setBuildStatus("Build succeeded", "SUCCESS")
		}
		unstable {
			setBuildStatus("Unstable", "FAILURE")
		}
		failure {
			setBuildStatus("Failed", "FAILURE")
		}
		aborted {
			setBuildStatus("Timed Out", "FAILURE")
		}
        always {
            // copy crash logs created after the tests began
            sh 'find /Library/Logs/DiagnosticReports -type f -newer tests-began -exec cp {} output/DiagnosticLogs \\;'

            // archive all the logs
            sh 'tar -zcvf artifacts.tar.gz output'
            archiveArtifacts artifacts: 'artifacts.tar.gz', fingerprint: true
            junit 'build/reports/*.xml'
			// cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'output/ResearchKit/ios/CoberturaCodeCoverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
        }
    }
}
